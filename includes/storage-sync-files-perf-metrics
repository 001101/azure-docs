Since the Azure File Sync agent runs on a Windows Server machine that connects to the Azure file shares, the effective sync performance you experience depends upon a number of factors in your infrastructure: Windows Server and the underlying disk configuration, network bandwidth between the server and the Azure storage, file size, total dataset size, and the activity on the dataset. Since Azure File Sync works on the file level, the performance characteristics of an Azure File Sync-based solution is better measured in the number of objects (files and directories) processed per second. 
 
For Azure File Sync, performance is critical in two stages -
1	**Initial one-time provisioning**: When you first setup Azure File Sync groups and you ingest the server data into Azure File shares. Please refer to [Onboarding with Azure File Sync](..\articles\storage\storage\files\torage-sync-files-planning.md) for details.
2	**Ongoing sync**: After the data is initially seeded in the Azure File shares, Azure File Sync keeps multiple endpoints in sync.

To help you plan your deployment for each of the stages, below are the results observed during the internal testing on a system with a config
| System configuration |  |
|-|-|
| CPU | 64 Virtual Cores with 64 MB L3 cache |
| Memory | 128 GB |
| Disk | SAS disks with RAID 10 with battery backed cache |
| Network | 1 Gbps Network |
| Workload | General Purpose File Server|

| Initial one-time provisioning  |  |
|-|-|
| Number of objects | 10 million objects | 
| Dataset Size| ~4 TB |
| Average File Size | ~500 KB (Largest File: 100GB) |
| Upload Throughput | 15 objects per second |
| Namespace Download Throughput* | 350 objects per second |
 
*When a new server endpoint is created, the Azure File Sync agent does not download any of the file content. It first syncs the full namespace and then triggers background recall to download the files, either in their entirety or, if cloud tiering is enabled, to the cloud tiering policy set on the server endpoint.

| Ongoing sync  |   |
|-|--|
| Number of objects synced| 125,000 objects (~1% churn) | 
| Dataset Size| 50 GB |
| Average File Size | ~500 KB (Largest File: 100GB) |
| Upload Throughput | 20 objects per second |
| Full Download Throughput* | 30 objects per second |
 
If cloud tiering is enabled, you are likely to observe better performance as only some of the file data is downloaded. Azure File Sync only downloads the data of cached files when they are changed on any of the endpoints. For any tiered or newly created files, the agent does not download the file data, and instead only syncs the namespace to all the server endpoints. The agent also supports partial downloads of tiered files as they are accessed by the user. 
 
> [!Note]  
> The numbers above are not an indication of the performance that you will experience. The actual performance will depend on multiple factors as outlined in the beginning of this section.

As a general guide for your deployment, you should keep a few things in mind:
-	The Agent File Sync agentâ€™s object throughput approximately scales in proportion to the number of sync groups on the server. Splitting data into multiple sync groups on a server yields better throughput, which is also limited by the server and network.
-	Object throughput is inversely proportional to the MiB per second throughput. For smaller files, you will experience higher throughput in terms of the number of objects processed per second, but lower MiB per second throughput.  Conversely, for larger files, you will get fewer objects processed per second, but higher MiB per second throughput. The MiB per second throughput is limited by the Azure Files scale targets. 
